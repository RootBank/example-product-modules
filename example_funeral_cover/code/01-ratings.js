// 01-ratings.js
// Contains all functions involved in calculating the premiums and ratings for the policy

/**
 * Rating table stored as CSV file, with multiple factors
 * This table is purely made up random values in a ascending order.
 * Should not be used for real life pricing, ever.
 */
const ageAndBiologicalSexRatingTable = `age,male,female
1,0.03400000000000000000,0.0320000000000000000
2,0.054000000000000000,0.0450000000000000000
3,0.05600000000000000000,0.0550000000000000000
4,0.06200000000000000000,0.0610000000000000000
5,0.06700000000000000000,0.0660000000000000000
6,0.07200000000000000000,0.0710000000000000000
7,0.07800000000000000000,0.0770000000000000000
8,0.07900000000000000000,0.0780000000000000000
9,0.08100000000000000000,0.0800000000000000000
10,0.08200000000000000000,0.0810000000000000000
11,0.08500000000000000000,0.0830000000000000000
12,0.08800000000000000000,0.0870000000000000000
13,0.08900000000000000000,0.0880000000000000000
14,0.09300000000000000000,0.0900000000000000000
15,0.09700000000000000000,0.0940000000000000000
16,0.47198661390797400000,0.2345022986551220000
17,0.48552953059908600000,0.2412309748526630000
18,0.49946104007460600000,0.2481527198756730000
19,0.51379229239589600000,0.2552730735317290000
20,0.52853475755786200000,0.2625977345845070000
21,0.54370023466895400000,0.2701325653147830000
22,0.55728228114810700000,0.2768806827951290000
23,0.56772576057576100000,0.2820694315002350000
24,0.57581351732670300000,0.2860877606078260000
25,0.58242128380629400000,0.2893707698771150000
26,0.58848714808213600000,0.2923845399165600000
27,0.59499501844172500000,0.2889686585506570000
28,0.60297390205379300000,0.2812182701429200000
29,0.61351442376791500000,0.2754659348342030000
30,0.62764012555399400000,0.2767719699907920000
31,0.64552219202940200000,0.2854944021740320000
32,0.66702309565698300000,0.3006492305142100000
33,0.69201278278022900000,0.3214189110201090000
34,0.72035279509912100000,0.3468912981303910000
35,0.75188010124835400000,0.3758268980888230000
36,0.78639091306618500000,0.4064588736868620000
37,0.82362451412186600000,0.4363565278640150000
38,0.86330479866910600000,0.4626961996085690000
39,0.90560309932247300000,0.4848169286263800000
40,0.95098735839252200000,0.5036190959823540000
41,1.00000000000000000000,0.5203486283820060000
42,1.05326822529825000000,0.5365123124896080000
43,1.11151929486005000000,0.5538386604734400000
44,1.17559947643077000000,0.5742888463243070000
45,1.24649755408889000000,0.6001312963838460000
46,1.32533570491789000000,0.6339443525858630000
47,1.41287908889666000000,0.6767666252300830000
48,1.50955184572463000000,0.7282420884411030000
49,1.61574045037337000000,0.7877802396601390000
50,1.73177825333104000000,0.8544177787669990000
51,1.85791857574138000000,0.9266479645369200000
52,1.99430406628959000000,1.0022637002778100000
53,2.14093246002871000000,1.0782398353057700000
54,2.29766410557328000000,1.1508084864829200000
55,2.46525908080416000000,1.2183228184893400000
56,2.64573845986781000000,1.2821529287484800000
57,2.84160642344001000000,1.3443942355419700000
58,3.05589177377454000000,1.4077127748324000000
59,3.29225448070795000000,1.4753439968792900000
60,3.55512246879813000000,1.5511564483697400000
61,3.84986793473324000000,1.6398050239230000000
62,4.18298775234558000000,1.7469450771319500000
63,4.56007185610108000000,1.8767591206211800000
64,4.98407250919293000000,2.0301229977634600000
65,5.45738859065004000000,2.2074610229103600000
66,5.98182295282885000000,2.4087568293110100000
67,6.55829079052323000000,2.6332642374167200000
68,7.18648477622204000000,2.8791867498750300000
69,7.86450450890974000000,3.1433409186781500000
70,8.58853364404997000000,3.4212307377389900000
71,9.36151825027456000000,3.7781809752237900000
72,10.20614092294140000000,4.1735720075146500000
73,11.15494996349340000000,4.6074038346115700000
74,12.25087967547730000000,5.0796764565145500000
75,13.50907812863440000000,5.6013729574538800000
76,14.88647432998540000000,6.1724933374295700000
77,16.42280086226150000000,6.8095122227870700000
78,18.11805772546270000000,7.5124296135263800000
79,19.98548911383270000000,8.2867370517626500000
80,22.05158341585920000000,9.1434176217261900000
81,24.32958482578570000000,10.0879628655321000000
82,26.83273753785620000000,11.1258643252956000000
83,29.57925970598660000000,12.2681050852470000000
84,32.59079767112950000000,13.5201766875014000000
85,35.89356128564890000000,14.8930622162891000000
86,39.50740684382050000000,16.3922532137253000000
87,43.43895311040270000000,18.0177496798100000000
88,47.67496255587850000000,19.7750431566583000000
89,52.26176653355780000000,21.6806082706156000000
90,57.22584010247480000000,23.7399365637972000000
91,62.58703955690510000000,25.9640111204333000000
92,68.37183995588300000000,28.3638150247542000000
93,74.58686006416710000000,30.9448398188751000000
94,81.23871864651580000000,33.7015939606809000000
95,88.35389076196350000000,36.6505520765169000000
96,95.92575764575140000000,39.7917141663832000000
97,103.95431929788000000000,43.1250802302797000000
98,112.43957571834900000000,46.6451587260915000000
99,121.61743997856300000000,50.4525631248467000000
100,131.54444609422000000000,54.5707463622116000000`;

/**
 * Matchs strict relationship types to broader types.
 * @param {string} relationship The relationship of the member to the main life
 * @returns The broad level relationship, defaults to `extended_family` when relationship not found
 */
const getRelationshipType = (relationship) => {
  if (relationship === 'main') {
    return 'main';
  }
  if (['spouse', 'partner'].includes(relationship)) {
    return 'spouse';
  }
  if (
    ['daughter', 'son', 'daughter_in_law', 'son_in_law'].includes(relationship)
  ) {
    return 'child';
  }
  if (
    ['father', 'mother', 'father_in_law', 'mother_in_law'].includes(
      relationship,
    )
  ) {
    return 'parent';
  }
  return 'extended_family';
};

/**
 * Rating table stored as an object
 */
const relationshipRatingTable = {
  main: 1,
  spouse: 0.8,
  child: 0.7,
  parent: 1.2,
  extended_family: 0.9,
};

/**
 * Rating factor stored as a constant
 */
const baseRiskRate = 0.04;

/**
 * Calculcates the total premium for a life from their rating factors.
 * @param {object} params
 * @param {number} params.age The age of the member.
 * @param {number} params.total_cover_amount The total cover amount for the member.
 * @param {'male' | 'female'} params.biological_sex The biological sex of the member.
 * @param {string} params.relationship The relationship of the member to the main life, defaults to main when not provided.
 * @returns {number} The total premium for the member with loading factor applied
 */
const getPremium = ({
  age,
  total_cover_amount,
  biological_sex,
  relationship = 'main',
}) => {
  const coverAmount = total_cover_amount;

  // Calculate rating from age and biological sex
  const ageAndBiologicalSexObject = getObjectFromCsv(
    ageAndBiologicalSexRatingTable,
  );
  const ageAndBiologicalSexRating =
    ageAndBiologicalSexObject[age][biological_sex];

  // Calculate rating due to realtionship to main member
  const relationshipType = getRelationshipType(relationship);
  const relationshipRating = relationshipRatingTable[relationshipType];

  // Calculate final premium with loading factor
  const loading = 0.25;
  const premiumNoLoading =
    (coverAmount / 10) *
    baseRiskRate *
    ageAndBiologicalSexRating *
    relationshipRating;
  const premiumWithLoading = Math.round(premiumNoLoading / (1 - loading));

  return premiumWithLoading;
};
